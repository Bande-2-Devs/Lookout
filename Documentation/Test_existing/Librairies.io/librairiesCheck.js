import fetch from 'node-fetch';
import fs from 'fs';
import { dirname } from 'path';
import { fileURLToPath } from 'url';

// Remplace par ta cl√© API Libraries.io
const API_KEY = 'TA_CLE_API';

// Charger le fichier package.json
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const packageJsonPath = `${__dirname}/package.json`;
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

// Fonction pour r√©cup√©rer les d√©tails d'une biblioth√®que depuis l'API Libraries.io
async function getLibraryDetails(platform, packageName) {
    const url = `https://libraries.io/api/${platform}/${packageName}?api_key=${API_KEY}`;
    const response = await fetch(url);
    const data = await response.json();
    return data;
}

// Fonction pour afficher les d√©tails de chaque biblioth√®que
async function displayLibraryDetails() {
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

    for (const [packageName, version] of Object.entries(dependencies)) {
        try {
            console.log(`\nüì¶ V√©rification de ${packageName}...`);
            
            // Interroger l'API pour r√©cup√©rer les d√©tails du paquet
            const details = await getLibraryDetails('npm', packageName);

            // R√©cup√©rer les informations sur la licence
            let licenses = 'Non sp√©cifi√©e';
            if (Array.isArray(details.licenses)) {
                licenses = details.licenses.join(', ');
            } else if (typeof details.licenses === 'string') {
                licenses = details.licenses;
            }

            // Afficher les informations pertinentes
            console.log(`- Derni√®re version : ${details.latest_release_number}`);
            console.log(`- License : ${licenses}`);
            console.log(`- Nombre de contributeurs : ${details.contributors_count || 'N/A'}`);
            console.log(`- D√©p√¥t : ${details.repository_url}`);
            console.log(`- Mises √† jour r√©centes : ${details.latest_release_published_at}`);
            console.log(`- Popularit√© (Stars GitHub) : ${details.stars || 'N/A'}`);
            console.log(`- SourceRank (qualit√© globale) : ${details.sourcerank || 'N/A'}`);

            // Si des d√©pendances sont trouv√©es
            if (details.dependencies && details.dependencies.length > 0) {
                console.log(`- D√©pendances :`);
                details.dependencies.forEach(dep => {
                    console.log(`  - ${dep.name} : ${dep.requirements}`);
                });
            } else {
                console.log(`- Pas de d√©pendances trouv√©es`);
            }

            // V√©rification des vuln√©rabilit√©s et des pratiques de s√©curit√©
            if (details.has_security_policy) {
                console.log(`- Politique de s√©curit√© en place : Oui`);
            } else {
                console.log(`- Politique de s√©curit√© en place : Non`);
            }
            
            console.log(`- Pratiques de d√©veloppement s√©curis√© (2FA) : ${details.has_two_factor_authentication ? 'Oui' : 'Non'}`);

        } catch (error) {
            console.error(`Erreur lors de la v√©rification de ${packageName}:`, error.message);
        }
    }
}

// Ex√©cuter la fonction
displayLibraryDetails();
